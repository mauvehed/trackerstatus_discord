name: Docker Build and Publish

on:
  push:
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.wait-for-ci.outputs.conclusion == 'success' }}
    steps:
      - name: Wait for CI
        id: wait-for-ci
        uses: actions/github-script@v7
        with:
          script: |
            const ref = context.ref;
            let success = false;
            
            // Wait for up to 5 minutes
            for (let i = 0; i < 30; i++) {
              const result = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                per_page: 100
              });
              
              // Look for any test job
              const testRuns = result.data.check_runs.filter(run => 
                run.name.startsWith('test (')
              );
              
              if (testRuns.length > 0) {
                // Check if all test jobs are completed
                const allCompleted = testRuns.every(run => 
                  run.status === 'completed'
                );
                
                if (allCompleted) {
                  // Check if all tests passed
                  success = testRuns.every(run => 
                    run.conclusion === 'success'
                  );
                  break;
                }
              }
              
              // Wait 10 seconds before checking again
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
            
            core.setOutput('conclusion', success ? 'success' : 'failure');
            
            if (!success) {
              core.setFailed('CI checks did not pass');
            }

  build:
    needs: [wait-for-ci]
    if: needs.wait-for-ci.outputs.success == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=main,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make package public
        if: github.event_name != 'pull_request'
        run: |
          # Get the package name from the image name
          PACKAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          
          # Make the package public using the GitHub API
          curl -L \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/user/packages/container/$PACKAGE_NAME/visibility \
            -d '{"visibility":"public"}' 